package projctx.famazing.ui;

import android.content.DialogInterface;
import android.support.v4.app.Fragment;
import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.FragmentActivity;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ListView;
import android.widget.TextView;

import com.google.android.gms.maps.model.LatLng;

import java.sql.Date;
import java.util.ArrayList;
import java.util.HashMap;

import projctx.famazing.R;
import projctx.famazing.data.Alert;
import projctx.famazing.data.AlertsListAdapter;
import projctx.famazing.data.DAO;
import projctx.famazing.data.DAOEventListener;
import projctx.famazing.data.SQLRuntimeException;
import projctx.famazing.data.User;

/**
 * Fragment responsible of showing the list with all the alerts generated by the family members.
 */
public class HistoryFragment extends Fragment implements DAOEventListener {

    private static HistoryFragment self;

    private ArrayList<Alert> alerts = new ArrayList<>();
    private HashMap<Integer, String> id_name_map = new HashMap<>();

    private DAO dao;
    private AlertsListAdapter adapter;

    private ListView alertsListView;
    private TextView loading_textView;
    private TextView noAlertTextView;

    private int requestsSatisfied = 0;
    private Integer totalRequestsNeeded;

    FragmentActivity activity;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (self == null) {
            self = this;
        }
        dao = new DAO (this);
        activity = getActivity();
    }

    @Override
    public void onStart() {
        super.onStart();
        if (!dao.isConnected()) {
            Log.w("TAG", "HistoryFragment dao not connected");
            dao.connect();
        } else {
            Log.w("TAG", "HistoryFragment dao connected");
            onConnectActions();
        }
    }

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {

        View viewToDisplay = inflater.inflate(R.layout.content_history_fragment, container, false);

        alertsListView = (ListView) viewToDisplay.findViewById(R.id.history_listView);
        loading_textView = (TextView) viewToDisplay.findViewById(R.id.loading_textView);
        noAlertTextView = (TextView) viewToDisplay.findViewById(R.id.noAlertTextField);

        ActionBar actionBar = ((AppCompatActivity) getActivity()).getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle(getString(R.string.alerts_fragment_title));
        }

        if (alertsListView != null) {
            alertsListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                @Override
                public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                    Alert alertToShow = (Alert) parent.getItemAtPosition(position);

                    int userId = alertToShow.getUserId();
                    Date alertDate = alertToShow.getAlertDate();
                    LatLng alertLocation = alertToShow.getUserLocation();

                    //Shows a new map view with the alert located on the map and signed with a marker
                    Intent alertViewIntent = new Intent(getActivity(), AlertMapActivity.class);
                    Bundle data = new Bundle();
                    data.putInt(AlertMapActivity.USER_ID_INTENT_KEY, userId);
                    data.putSerializable(AlertMapActivity.ALERT_DATE_INTENT_KEY, alertDate);
                    data.putDoubleArray(AlertMapActivity.ALERT_LOCATION_INTENT_KEY, new double[]{alertLocation.latitude, alertLocation.longitude});
                    alertViewIntent.putExtras(data);
                    startActivity(alertViewIntent);
                }
            });
        }

        return viewToDisplay;
    }

    @Override
    public void onStop() {
        super.onStop();
        if (dao.isConnected()) {
            dao.disconnect();
        }
    }

    @Override
    public void handleConnectionEvent(SQLRuntimeException e) {
        if (e == null) {
            onConnectActions();
        } else {
            showErrorView();
        }
    }

    private void onConnectActions() {
        dao.getFamilyAlerts(HomeActivity.familyId);
    }

    @Override
    public void handleDisconnectionEvent(@Nullable SQLRuntimeException e) {
    }

    @Override
    public void handleResult(HashMap<String, Object> result) {
        if (totalRequestsNeeded != null && ++requestsSatisfied == totalRequestsNeeded && dao.isConnected()) {
            dao.disconnect();
        }
        Object res = result.get(DAO.RESULT_OBJECT_KEY);

        if (!(res instanceof SQLRuntimeException)) {
            int operationCode = (Integer) result.get(DAO.OPERATION_CODE_KEY);

            switch (operationCode) {
                case DAO.GET_ALERTS_CODE: {
                    alerts = (ArrayList<Alert>) res;
                    int requestsCounter = 0;
                    for (Alert alert : alerts) {
                        int creatorId = alert.getUserId();
                        if (id_name_map.get(creatorId) == null) {
                            requestsCounter++;
                            dao.getUser(creatorId);
                        }
                    }
                    totalRequestsNeeded = requestsCounter;
                    if (alertsListView != null) {
                        adapter = new AlertsListAdapter(alerts, id_name_map);
                        alertsListView.setAdapter(adapter);
                        alertsListView.setEmptyView(noAlertTextView);
                        alertsListView.invalidateViews();
                    }
                    loading_textView.setVisibility(View.GONE);
                    break;
                }
                case DAO.GET_USER_CODE: {
                    User user = (User) res;
                    int userId = user.getId();
                    String userName = user.getName();

                    if (id_name_map.get(userId) == null) {
                        id_name_map.put(userId, userName);
                    }
                    break;
                }
            }
            if (alertsListView != null) {
                alertsListView.invalidateViews();
            }
        } else {    //Connection error!
            if (dao.isConnected()) {
                dao.disconnect();
            }
            showErrorView();
        }
    }

    private void showErrorView() {
        new AlertDialog.Builder(activity).setMessage("NO CONNECTION").setMessage("No connection. Please try again later")
                .setNeutralButton("RETRY", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.cancel();
                        getFragmentManager().beginTransaction().detach(self).attach(self).commit();
                    }
                })
                .setNegativeButton("BACK", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.cancel();
                        activity.getSupportFragmentManager().popBackStack();
                    }
                }).setCancelable(false).show();
    }
}